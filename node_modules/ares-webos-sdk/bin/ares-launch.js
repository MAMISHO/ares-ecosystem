var fs=require("fs"),path=require("path"),async=require("async"),log=require("npmlog"),nopt=require("nopt"),ipkg=require("./../lib/ipkg-tools"),versionTool=require("./../lib/version-tools"),cliControl=require("./../lib/cli-control"),help=require("./../lib/helpFormat"),novacom=require("./../lib/novacom"),deviceTools=require("./../lib/setup-device"),processName=path.basename(process.argv[1]).replace(/.js/,"");process.on("uncaughtException",function(a){log.error("uncaughtException",a.toString());cliControl.end(-1)});
2===process.argv.length&&process.argv.splice(2,0,"--help");
var knownOpts={device:[String,null],inspect:Boolean,open:Boolean,"device-list":Boolean,close:Boolean,hosted:Boolean,running:Boolean,params:[String,Array],"host-port":[String,null],version:Boolean,help:Boolean,"hidden-help":Boolean,level:"silly verbose info http warn error".split(" ")},shortHands={d:["--device"],i:["--inspect"],o:["--open"],D:["--device-list"],c:["--close"],r:["--running"],p:["--params"],P:["--host-port"],V:["--version"],h:["--help"],hh:["--hidden-help"],H:["--hosted"],v:["--level",
"verbose"]},argv=nopt(knownOpts,shortHands,process.argv,2);log.heading=processName;log.level=argv.level||"warn";ipkg.launcher.log.level=log.level;if(argv.help||argv["hidden-help"])showUsage(argv["hidden-help"]),cliControl.end();log.verbose("argv",argv);var installMode="Installed",hostedurl="",params={};argv.hosted&&(installMode="Hosted");var op;
argv.close?op=close:argv.running?op=running:argv["device-list"]?deviceTools.showDeviceListAndExit():argv.version?versionTool.showVersionAndExit():op=argv.hosted?launchHostedApp:launch;var options={device:argv.device,inspect:argv.open||argv.inspect,open:argv.open,installMode:installMode,hostPort:argv["host-port"]};if(1<argv.argv.remain.length)return finish("Please check arguments");var appId=argv.argv.remain[0];op&&versionTool.checkNodeVersion(function(a){op(finish)});
function showUsage(a){var b=["","NAME",help.format(processName+" - Runs and terminates applications"),"","SYNOPSIS",help.format(processName+" [OPTION...] <APP_ID>"),"",help.format(processName+" [OPTION...] -H, --hosted <APP_DIR>"),"","OPTION",help.format("-d, --device <DEVICE>","Specify DEVICE to use"),help.format("-D, --device-list","List the available DEVICEs"),help.format("-c, --close","Terminate appication on device"),help.format("-r, --running","List the running applications on device"),help.format("-i, --inspect",
"Launch application with a web inspector"),help.format("-o, --open","Open the web inspector url with a web browser"),help.format("-p, --params <PARAMS>","PARAMS is used on boot application-launching"),help.format(" PARAMS can be one of the following forms"),help.format("win32","\t (e.g.) -p \"{'key1':'value2', 'key2':'value2 containing space'}\""),help.format(["linux","darwin"],'\t (e.g.) -p \'{"key1":"value2", "key2":"value2 containing space"}\''),help.format('\t (e.g.) -p "key1=value2" -p "key2=value2 containing space"'),
"",help.format("--level <LEVEL>","tracing LEVEL is one of 'silly', 'verbose', 'info', 'http', 'warn', 'error' [warn]"),help.format("-h, --help","Display this help"),help.format("-V, --version","Display version info"),"","DESCRIPTION",help.format("To launch an app on the TARGET DEVICE, user have to specify"),help.format("the TARGET DEVICE using '--device, -d' option"),"",help.format("PARAMS defines parameters to be used on boot app lauching."),help.format('PARAMS can be specified as key-value pairs of the form "key=value"'),
help.format('or as JSON objects of the form \'{"key1":"value1", "key2":"value2", ...}\'.'),help.format("Surrounding quotes are required in both cases."),"",help.format("Hosted app does not need packaging/installing."),help.format("Hosted app means providing app via a local server based on <APP_DIR>,"),help.format("user just needs to specify <APP_DIR> path"),help.format("to run APP as a hosted app without packaging, installing."),help.format("If user wants to close Hosted app, please use com.sdk.ares.hostedapp as a <APP_ID>."),
"",help.format("APP_ID is an application id described in appinfo.json"),""],c=["","EXTRA-OPTION",help.format("-P, --host-port","Set Host PC's port for remote web inspector"),"","EXAMPLES","","# Set the host-pc's port (2043) to connect to the remote web inspector",processName+" com.yourdomain.app -d DEVICE -i -P 2043","# If -P options is not used, a random port will be assigned",processName+" com.yourdomain.app -d DEVICE -i",""];help.print(b);a&&help.print(c)}
function launch(){var a=appId;params=getParams();log.info("launch():","pkgId:",a);a||(help(),cliControl.end(-1));ipkg.launcher.launch(options,a,params,finish)}function launchHostedApp(){var a=fs.realpathSync(appId);options.hostedurl=a;params=getParams();log.info("launch():","pkgId:","com.sdk.ares.hostedapp");ipkg.launcher.launch(options,"com.sdk.ares.hostedapp",params,finish)}
function getParams(){var a={};argv.params&&argv.params.forEach(function(b){var c;c=refineJsonString(b);isJson(c)?a=JSON.parse(c):insertParams(a,b)});return a}function refineJsonString(a){var b=a,c=/^['|"](.)*['|"]$/;c.test(b)&&(b=b.substring(1,a.length-1));c=/^{(.)*}$/;return c.test(b)?-1===b.indexOf('"')?b.replace(/\s*"/g,"").replace(/\s*'/g,"").replace("{",'{"').replace("}",'"}').replace(/\s*,\s*/g,'","').replace(/\s*:\s*/g,'":"'):b.replace(/\s*'/g,'"'):a}
function isJson(a){try{JSON.parse(a)}catch(b){return!1}return!0}function close(){var a=appId;log.info("close():","pkgId:",a);a||(help(),cliControl.end(-1));ipkg.launcher.close(options,a,params,finish)}function running(){ipkg.launcher.listRunningApp(options,null,function(a,b){var c="",d=0;b instanceof Array&&b.forEach(function(a){0!==d++&&(c=c.concat("\n"));c=c.concat(a.id)});console.log(c);finish(a)})}
function finish(a,b){log.info("finish():","err:",a);a?(log.error(processName+": "+a.toString()),log.verbose(a.stack),cliControl.end(-1)):(b&&b.msg&&console.log(b.msg),cliControl.end())}function insertParams(a,b){var c=b.split("=");2==c.length&&(a[c[0]]=c[1],log.info("Inserting params "+c[0]+" = "+c[1]))}process.on("uncaughtException",function(a){console.log("Caught exception: "+a)});
