var fs=require("fs"),path=require("path"),log=require("npmlog"),nopt=require("nopt"),async=require("async"),sprintf=require("sprintf-js").sprintf,Table=require("easy-table"),versionTool=require("./../lib/version-tools"),cliControl=require("./../lib/cli-control"),novacom=require("./../lib/novacom"),help=require("./../lib/helpFormat"),processName=path.basename(process.argv[1]).replace(/.js/,"");process.on("uncaughtException",function(a){log.info("exit",a);log.error("exit",a.toString());cliControl.end(-1)});
var processName=path.basename(process.argv[1]).replace(/.js/,""),knownOpts={help:Boolean,level:"silly verbose info http warn error".split(" "),version:Boolean,list:Boolean,listfull:Boolean,add:[String,null],remove:[String,null],modify:[String,null],info:[String,Array],reset:Boolean},shortHands={h:["--help"],v:["--level","verbose"],V:["--version"],l:["--list"],F:["--listfull"],i:["--info"],a:["--add"],r:["--remove"],m:["--modify"],R:["--reset"]},helpString=["","NAME",help.format(processName+" - Manages target device, such as emulator and webOS Device."),
"","SYNOPSIS",help.format(processName+" [OPTION...]"),help.format(processName+" [OPTION...] -a, --add DEVICE_NAME -i, --info <DEVICE_INFO>"),help.format(processName+" [OPTION...] -m, --modify DEVICE_NAME -i, --info <DEVICE_INFO>"),help.format(processName+" [OPTION...] -r, --remove DEVICE_NAME"),"","OPTION",help.format("-R, --reset","initialize the DEVICE list"),help.format("-l, --list","List the available DEVICEs"),help.format("-F, --listfull","List the available DEVICEs in detail"),help.format("--level <LEVEL>",
"tracing LEVEL is one of 'silly', 'verbose', 'info', 'http', 'warn', 'error' [warn]"),help.format("-h, --help","Display this help"),help.format("-V, --version","Display version info"),"","DESCRIPTION",help.format("Basically, this command provide an interactive prompt to get a device information"),"",help.format("To add a new device info, use '--add DEVICE_NAME -i <DEVICE_INFO>'"),help.format("<DEVICE_INFO> can be one of the following forms"),help.format("win32","\t (e.g.) --add tv2 -i \"{'username':'root', 'host':'127.0.0.1','port':'22'}\""),
help.format(["linux","darwin"],'\t (e.g.) --add tv2 -i \'{"username":"root", "host":"127.0.0.1","port":"22"}\''),help.format('\t (e.g.) --add tv2 -i "username=root" -i "host=127.0.0.1" -i "port=22"'),"",help.format("To remove DEVICE, use '--remove DEVICE_NAME'"),help.format("\t (e.g.) --remove tv2"),"",help.format("To modify DEVICE_INFO, use '--modify DEVICE_NAME -i <DEVICE_INFO>'"),help.format("<DEVICE_INFO> can be one of the following forms"),help.format("win32","\t (e.g.) --modify tv2 -i \"{'username':'developer','host':'192.168.0.123','port':'6622'}\""),
help.format(["linux","darwin"],'\t (e.g.) --modify tv2 -i \'{"username":"developer","host":"192.168.0.123","port":"6622"}\''),help.format('\t (e.g.) --modify tv2 -i "username=developer" -i "host=192.168.0.123" -i "port=6622"'),"","",help.format("** Attributes of <DEVICE_INFO>"),help.format("   description [string]   description of target device"),help.format("   host [string]   ip address"),help.format("   port [string]   port number"),help.format("   username [string]   user name to connect ('developer' or 'prisoner')"),
help.format("   files ['stream' | 'sftp']   file stream type can be 'stream' or 'sftp'"),help.format("                         if target device support sftp-server,"),help.format("                         sftp is more stable than general stream"),help.format("   privatekey  [string]   ssh private key file name."),help.format("                         ssh private key should exist under $HOME/.ssh/"),help.format("   passphrase  [string]   passphrase used for generating ssh keys"),help.format("   password  [string]   password for ssh connection"),
""],argv=nopt(knownOpts,shortHands,process.argv,2);log.heading=processName;log.level=argv.level||"warn";log.verbose("argv",argv);var op;argv.list?op=list:argv.listfull?op=listFull:argv.reset?op=reset:argv.add||argv.modify||argv.info?op=modifyDeviceInfo:argv.remove?op=removeDeviceInfo:argv.version?versionTool.showVersionAndExit():argv.help?(help.print(helpString),cliControl.end()):op=interactiveInput;var options={name:argv.device};op&&versionTool.checkNodeVersion(function(a){op(finish)});
var defaultDeviceInfo={type:"starfish",host:"127.0.0.1",port:22,username:"root",description:"new device description",files:"stream",indelible:!1},requiredKeys={name:!1,type:!1,host:!0,port:!0,username:!0,description:!0,files:!0,privateKeyName:!0,passphrase:!0,password:!0};
function reset(a){var b=path.resolve(process.env.APPDATA||process.env.HOME||process.env.USERPROFILE,".ares"),c=path.join(b,"novacom-devices.json");async.series([function(a){fs.existsSync(c)?fs.unlink(c,a):a()},list()],function(c){a(c)})}
function list(a){var b=new Table,c=[],d=new novacom.Resolver;async.waterfall([d.load.bind(d),d.list.bind(d),function(a,d){log.info("list()","devices:",a);Array.isArray(a)&&a.forEach(function(a){c.push({name:a.name,info:a.username+"@"+a.host+":"+a.port,connection:"ssh"})});c.forEach(function(a){b.cell("name",a.name);b.cell("deviceinfo",a.info);b.cell("connection",a.connection);b.newRow()});console.log(b.toString());log.info("list()","Success");d()}],a)}
function listFull(a){var b=[],c=new novacom.Resolver;async.waterfall([c.load.bind(c),c.list.bind(c),function(a,c){log.info("list()","devices:",a);Array.isArray(a)&&a.forEach(function(a){b.push({name:a.name,deviceinfo:{ip:a.host,port:String(a.port),user:a.username},connection:"ssh",details:{password:a.password,privatekey:a.privateKeyName,passphrase:a.passphrase,platform:a.type,files:a.files,description:a.description}})});console.log(JSON.stringify(b,null,4));log.info("listFull()","Success");c()}],
a)}function replaceDefaultDeviceInfo(a){a&&(a.type=a.type||defaultDeviceInfo.type,a.host=a.host||defaultDeviceInfo.host,a.port=a.port||defaultDeviceInfo.port,a.username=a.username||defaultDeviceInfo.username,a.files=a.files||defaultDeviceInfo.files,a.description=a.description||defaultDeviceInfo.description,a.indelible=a.indelible||defaultDeviceInfo.indelible)}
function refineJsonString(a){var b=a,c=/^['|"](.)*['|"]$/;c.test(b)&&(b=b.substring(1,a.length-1));c=/^{(.)*}$/;return c.test(b)?-1===b.indexOf('"')?b.replace(/\s*"/g,"").replace(/\s*'/g,"").replace("{",'{"').replace("}",'"}').replace(/\s*,\s*/g,'","').replace(/\s*:\s*/g,'":"'):b.replace(/\s*'/g,'"'):a}
function getInput(a,b){process.stdin.resume();process.stdin.setEncoding("utf8");process.stdout.write(a+": ");process.stdin.once("data",function(a){var d;"\n"!==a&&(d=a.toString().trim());b(null,d)})}function getDevice(a,b){if(!a)return b(Error("Need to input a device name"));var c=new novacom.Resolver;async.waterfall([c.load.bind(c),c.getDeviceBy.bind(c,"name","^"+a+"$")],function(c,e){c?(console.log("Adding new device named ",a,"!!"),b(null,{name:a,mode:"add"})):b(null,e)})}
function interactiveInput(a){var b="modify";async.waterfall([list.bind(this),function(a){console.log("** You can modify the device info in the above list, or add new device.");a()},getInput.bind(this,"Enter Device Name"),getDevice.bind(this),function(a,d){var e={};a.mode&&(b=a.mode,delete a.mode);a.name&&console.log("Device Name :",a.name);var f=Object.keys(requiredKeys);async.forEachSeries(f,function(b,d){if(!1===requiredKeys[b])return e[b]=a[b],d();var f="undefined"!==defaultDeviceInfo[b]?"(default: "+
defaultDeviceInfo[b]+")":"";async.waterfall([getInput.bind(this,b+" "+(a[b]?"("+a[b]+")":f)),function(d,f){e[b]="string"===typeof d&&0<d.length?d:a[b];f()}],function(a){d()})},function(a){d(a,e)})}],function(c,d){if(c)return a(c);var e="pass";async.series([function(a){var b=['""',"''"];["privateKeyName","password","passphrase"].forEach(function(a){(value=d[a])&&-1!==b.indexOf(value)&&delete d[a]});if(d.privateKeyName&&"string"===typeof d.password){if(0===d.password.length)return e="key",a();async.waterfall([getInput.bind(this,
"Select SSH auth method [ssh Key(k) or password(p)]"),function(a,b){e=a?a.match(/pass|P/gi)?"pass":"key":"key";b()}],function(b){a(b)})}else d.privateKeyName?e="key":d.password&&(e="pass"),a()},function(a){"pass"===e?(d.password=d.password||"",d.privateKey="@DELETE@",d.passphrase="@DELETE@",d.privateKeyName="@DELETE@"):"key"===e&&(d.password="@DELETE@",d.privateKey={openSsh:d.privateKeyName},d.passphrase=d.passphrase||"@DELETE@",d.privateKeyName="@DELETE@");a()}],function(c){if(c)return a(c);replaceDefaultDeviceInfo(d);
d.port&&(d.port=Number(d.port));c=new novacom.Resolver;async.series([c.load.bind(c),c.modifyDeviceFile.bind(c,b,d),list.bind(this)],function(c){if(c)return a(c);a(null,{msg:"Success to "+b+" a device!!"})})})})}function isJson(a){try{JSON.parse(a)}catch(b){return!1}return!0}function insertParams(a,b){var c=b.split("=");2==c.length&&(a[c[0]]=c[1],log.info("Inserting params "+c[0]+" = "+c[1]))}
function getParams(a){var b={};argv[a]&&[].concat(argv[a]).forEach(function(a){var d;d=refineJsonString(a);isJson(d)?b=JSON.parse(d):insertParams(b,a)});return b}
function modifyDeviceInfo(a){try{var b=argv.add?"add":argv.modify?"modify":null;if(!b)return a(Error("Please specify an option among '--add' and '--modify'"));if(argv[b].match(/^-/))return a(Error("Please specify device name !!"));var c=getParams(argv.info?"info":b);if(!c.name){if("true"===argv[b])return a(Error("Please specify device name !!"));c.name=argv[b]}"string"===typeof c.privatekey&&(c.privateKey=c.privatekey,c.privateKey={openSsh:c.privateKey},delete c.privatekey,c.password="@DELETE@");
"undefined"!==typeof c.password&&"@DELETE@"!==c.password&&(c.privateKey="@DELETE@",c.passphrase="@DELETE@");"add"===b&&replaceDefaultDeviceInfo(c);var d=new novacom.Resolver;c.port&&(c.port=Number(c.port));async.series([d.load.bind(d),d.modifyDeviceFile.bind(d,b,c),list.bind(this)],function(d){if(d)return a(d);a(null,{msg:"Success to "+b+" a device named "+c.name+"!!"})})}catch(e){a(e)}}
function removeDeviceInfo(a){try{var b=refineJsonString(argv.remove),c=new novacom.Resolver,b={name:b};async.series([c.load.bind(c),c.modifyDeviceFile.bind(c,"remove",b),list.bind(this)],function(b){if(b)return a(b);a(null,{msg:"Success to remove a device named "+argv.remove+"!!"})})}catch(d){a(d)}}
function finish(a,b){log.info("finish():","err:",a);a?(log.error(processName+": "+a.toString()),log.verbose(a.stack),cliControl.end(-1)):(log.info("finish():",b),b&&b.msg&&console.log(b.msg),cliControl.end())}process.on("uncaughtException",function(a){console.log("Caught exception: "+a)});
