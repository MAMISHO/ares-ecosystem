var fs=require("fs"),path=require("path"),log=require("npmlog"),nopt=require("nopt"),async=require("async"),ipkg=require("./../lib/ipkg-tools"),versionTool=require("./../lib/version-tools"),cliControl=require("./../lib/cli-control"),novacom=require("./../lib/novacom"),help=require("./../lib/helpFormat"),util=require("util"),deviceTools=require("./../lib/setup-device"),processName=path.basename(process.argv[1]).replace(/.js/,"");
process.on("uncaughtException",function(a){log.info("exit",a);log.error("exit",a.toString());cliControl.end(-1)});2===process.argv.length&&process.argv.splice(2,0,"--help");
var processName=path.basename(process.argv[1]).replace(/.js/,""),knownOpts={help:Boolean,level:"silly verbose info http warn error".split(" "),version:Boolean,"device-list":Boolean,list:Boolean,port:[String,Array],device:[String,null],run:[String,null],follow:Boolean},shortHands={h:["--help"],v:["--level","verbose"],V:["--version"],D:["--device-list"],l:["--list"],p:["--port"],f:["--follow"],d:["--device"]},helpString=["","NAME",help.format(processName+" - Display application logs from a webOS device."),
"","SYNOPSIS",help.format(processName+" [OPTION...] [APP_ID]"),"","OPTION",help.format("-d, --device <DEVICE>","Specify DEVICE to use"),help.format("-D, --device-list","List the available DEVICEs"),help.format("-f, --follow","Follow the log output (use Ctrl-C to terminate)"),help.format("-l, --list","List the installed app IDs"),help.format("-h, --help","Display this help"),help.format("-V, --version","Display version info"),"","DESCRIPTION","",help.format("**Restriction**"),help.format("this command can display only native application logs, not web application."),
"",help.format("APP_ID is the id of the application for which logs are shown."),"","Examples:","","# Display logs for app",processName+" com.yourdomain.app -d emulator","","# Follow logs for app",processName+" -f com.yourdomain.app -d emulator",""],argv=nopt(knownOpts,shortHands,process.argv,2);log.heading=processName;log.level=argv.level||"warn";log.verbose("argv",argv);argv.appId=0<argv.argv.remain.length?argv.argv.remain[0]:null;var op;
argv.list?op=list:argv["device-list"]?deviceTools.showDeviceListAndExit():argv.run?op=run:argv.appId||null===argv.appId&&argv.device?op=printLog:argv.version?versionTool.showVersionAndExit():(argv.help&&help.print(helpString),cliControl.end());var options={device:argv.device};op&&versionTool.checkNodeVersion(function(a){op(finish)});
function list(a){ipkg.installer.list(options,function(a,c){var d="";c instanceof Array&&c.forEach(function(a){d=d.concat(a.id).concat("\n")});process.stdout.write(d);finish(a)})}function isInstalled(a,b){var c=!1;if(null===a)return b();ipkg.installer.list(options,function(d,e){e instanceof Array&&e.forEach(function(b){b.id==a&&(c=!0)});c?b():b(Error(a+" is not installed."))})}
function run(a){var b=new novacom.Session(options.device,function(c,d){log.verbose("run()","argv:",argv.run);log.verbose("run()","options:",options);c?a(c):b.run(argv.run,process.stdin,process.stdout,process.stderr,a)})}
function printLog(a){log.verbose("printLog()","options:",options);argv.follow=argv.follow?"-f":"";var b="test -e /media/developer/log/devlog && tail "+argv.follow+" /media/developer/log/devlog || echo Log file does not exist.",c;async.series([isInstalled.bind(null,argv.appId),function(a){c=new novacom.Session(options.device,a)},function(a){function e(a){console.log(a)}c.run(b,process.stdin,function(a){(Buffer.isBuffer(a)?a.toString():a).split(/\r?\n/).forEach(e)},process.stderr,a)}],function(b,c){a(b)})}
function finish(a,b){log.info("finish():","err:",a);a?(log.error(processName+": "+a.toString()),log.verbose(a.stack),cliControl.end(-1)):(log.info("finish():",b),b&&b.msg&&console.log(b.msg),cliControl.end())}process.on("uncaughtException",function(a){console.log("Caught exception: "+a)});
