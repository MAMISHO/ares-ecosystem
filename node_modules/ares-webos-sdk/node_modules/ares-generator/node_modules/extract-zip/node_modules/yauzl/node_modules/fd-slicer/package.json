{
  "name": "fd-slicer",
  "version": "0.2.1",
  "description": "safely create multiple ReadStream or WriteStream objects from the same file descriptor",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "author": {
    "name": "Andrew Kelley",
    "email": "superjoe30@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.21.3",
    "stream-equal": "~0.1.5"
  },
  "dependencies": {
    "pend": "~1.1.3"
  },
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andrewrk/node-fd-slicer.git"
  },
  "bugs": {
    "url": "https://github.com/andrewrk/node-fd-slicer/issues"
  },
  "readme": "# fd-slicer\n\nSafe `fs.ReadStream` and `fs.WriteStream` using the same fd.\n\nLet's say that you want to perform a parallel upload of a file to a remote\nserver. To do this, we want to create multiple read streams. The first thing\nyou might think of is to use the `{start: 0, end: 0}` API of\n`fs.createReadStream`. This gives you two choices:\n\n 0. Use the same file descriptor for all `fs.ReadStream` objects.\n 0. Open the file multiple times, resulting in a separate file descriptor\n    for each read stream.\n\nNeither of these are acceptable options. The first one is a severe bug,\nbecause the API docs for `fs.write` state:\n\n> Note that it is unsafe to use `fs.write` multiple times on the same file\n> without waiting for the callback. For this scenario, `fs.createWriteStream`\n> is strongly recommended.\n\n`fs.createWriteStream` will solve the problem if you only create one of them\nfor the file descriptor, but it will exhibit this unsafety if you create\nmultiple write streams per file descriptor.\n\nThe second option suffers from a race condition. For each additional time the\nfile is opened after the first, it is possible that the file is modified. So\nin our parallel uploading example, we might upload a corrupt file that never\nexisted on the client's computer.\n\nThis module solves this problem by providing `createReadStream` and\n`createWriteStream` that operate on a shared file descriptor and provides\nthe convenient stream API while still allowing slicing and dicing.\n\n## Usage\n\n```js\nvar FdSlicer = require('fd-slicer');\nvar fs = require('fs');\n\nfs.open(\"file.txt\", 'r', function(err, fd) {\n  if (err) throw err;\n  var fdSlicer = new FdSlicer(fd);\n  var firstPart = fdSlicer.createReadStream({start: 0, end: 100});\n  var secondPart = fdSlicer.createReadStream({start: 100});\n  var firstOut = fs.createWriteStream(\"first.txt\");\n  var secondOut = fs.createWriteStream(\"second.txt\");\n  firstPart.pipe(firstOut);\n  secondPart.pipe(secondOut);\n});\n```\n\n## API Documentation\n\n### FdSlicer(fd, [options])\n\n```js\nvar FdSlicer = require('fd-slicer');\nfs.open(\"file.txt\", 'r', function(err, fd) {\n  if (err) throw err;\n  var fdSlicer = new FdSlicer(fd);\n  // ...\n});\n```\n\nMake sure `fd` is a properly initialized file descriptor. If you want to\nuse `createReadStream` make sure you open it for reading and if you want\nto use `createWriteStream` make sure you open it for writing.\n\n`options` is an optional object which can contain:\n\n * `autoClose` - if set to `true`, the file descriptor will be automatically\n   closed once the last stream that references it is closed. Defaults to\n   `false`. `ref()` and `unref()` can be used to increase or decrease the\n   reference count, respectively.\n\n#### Properties\n\n##### fd\n\nThe file descriptor passed in.\n\n#### Methods\n\n##### createReadStream(options)\n\nCreates a read stream based on the file descriptor. Passes `options` to\nthe `Readable` stream constructor. Accepts `start` and `end` options just\nlike `fs.createReadStream`.\n\nThe stream that this returns supports `destroy()` to cancel it.\n\n##### createWriteStream(options)\n\nCreates a write stream based on the file descriptor. Passes `options` to\nthe `Writable` stream constructor. Accepts the `start` option just\nlike `fs.createWriteStream`.\n\nThe stream that this returns supports `destroy()` to cancel it.\n\n##### read(buffer, offset, length, position, callback)\n\nEquivalent to `fs.read`, but with concurrency protection.\n`callback` must be defined.\n\n##### write(buffer, offset, length, position, callback)\n\nEquivalent to `fs.write`, but with concurrency protection.\n`callback` must be defined.\n\n##### ref()\n\nIncrease the `autoClose` reference count by 1.\n\n##### unref()\n\nDecrease the `autoClose` reference count by 1.\n",
  "readmeFilename": "README.md",
  "_id": "fd-slicer@0.2.1",
  "dist": {
    "shasum": "789e1845f1c914492ad25300e014bc60c2d6bf17"
  },
  "_from": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-0.2.1.tgz",
  "_resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-0.2.1.tgz"
}
